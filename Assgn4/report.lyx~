#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 7page%
\topmargin 5pheight%
\rightmargin 7page%
\bottommargin 5pheight%
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Report - Assignment 4
\end_layout

\begin_layout Author
-Akshay Anand (EE16B046)
\end_layout

\begin_layout Abstract
In this week's assignment, the bessel function of the first type (
\begin_inset ERT
status open

\begin_layout Plain Layout

$J_v(x)$
\end_layout

\end_inset

) was plotted for 41 values from 0 to 20.
 Then, an approximate equation in the form of 
\begin_inset Formula $A\cos\left(x_{i}\right)+B\sin(x_{i})\thickapprox J_{1}\left(x_{i}\right)$
\end_inset

 was first solved by least squares approximation to get the values of 
\begin_inset ERT
status open

\begin_layout Plain Layout

$A$
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

$B$
\end_layout

\end_inset

, from which the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
nu$
\end_layout

\end_inset

 used in the approximate bessel function equation was calculated.
 Then, a more accurate equation of the form 
\begin_inset Formula $A\frac{\cos\left(x_{i}\right)}{\sqrt{x}}+B\frac{\sin\left(x_{i}\right)}{\sqrt{x}}\thickapprox J_{1}\left(x_{i}\right)$
\end_inset

 was solved using the same method to approximate the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
nu$
\end_layout

\end_inset

 and the results obtained were noted.
 Finally, some noise (with mean 0) was also added to the calculated value
 of the bessel function and 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
nu$
\end_layout

\end_inset

 was calculated again and the deviation obtained was noted.
\end_layout

\begin_layout Abstract
Approximate Bessel function equation used for finding 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
nu$
\end_layout

\end_inset

:
\begin_inset Formula 
\[
J_{v}\left(x\right)\thickapprox\sqrt{\frac{2}{\pi x}}\cos\left(x-\frac{\nu\pi}{2}-\frac{\pi}{4}\right)
\]

\end_inset


\end_layout

\begin_layout Section*
Libraries Used
\end_layout

\begin_layout LyX-Code
import numpy as np
\end_layout

\begin_layout LyX-Code
import math
\end_layout

\begin_layout LyX-Code
from scipy.special import jv
\end_layout

\begin_layout LyX-Code
from numpy.linalg import lstsq
\end_layout

\begin_layout LyX-Code
import matplotlib.pyplot as plt
\end_layout

\begin_layout Section
Initializing vectors
\end_layout

\begin_layout Standard
A vector of 41 values from 0 to 20 is initialized in a variable 
\begin_inset ERT
status open

\begin_layout Plain Layout

$x$
\end_layout

\end_inset

 and the value of the bessel function of the first type for 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
nu$
\end_layout

\end_inset

 = 1 was calculated at each of these points and plotted.
\end_layout

\begin_layout LyX-Code
def J(x,v):
\end_layout

\begin_layout LyX-Code
    return jv(v,x)    #in-built bessel function in scipy.special
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
h = 0.5  # step-size
\end_layout

\begin_layout LyX-Code
x = np.linspace(0.0, 20.0, (20.0)/h + 1) # vector initialised
\end_layout

\begin_layout LyX-Code
y = J(x,1)
\end_layout

\begin_layout Standard
The bessel function is now plotted from 0 to 20 with 101 values so as to
 obtain a smooth graph.
\end_layout

\begin_layout LyX-Code
x_plot = np.linspace(0.0,20.0,101)
\end_layout

\begin_layout LyX-Code
plt.plot(x_plot,J(x_plot,1))
\end_layout

\begin_layout LyX-Code
plt.grid()
\end_layout

\begin_layout LyX-Code
plt.title('Plot of $J_1(x)$')
\end_layout

\begin_layout LyX-Code
plt.ylabel('$J_1(x)$')
\end_layout

\begin_layout LyX-Code
plt.xlabel('$x$')
\end_layout

\begin_layout LyX-Code
plt.show()
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename bessel.png
	scale 70

\end_inset


\end_layout

\begin_layout Section
Function for calculating 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
nu$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function for calculating 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
nu$
\end_layout

\end_inset

 is defined as follows
\end_layout

\begin_layout LyX-Code
def calcnu(x,x0,eps,model):
\end_layout

\begin_layout LyX-Code
    i = np.where(x==x0)[0][0]   # index in x corresponding to x0 calculated
\end_layout

\begin_layout LyX-Code
    x_new = x[i:len(x)] # sub vector of x extracted based on starting index
\end_layout

\begin_layout LyX-Code
    y_new = y[i:len(x)] # sub vector of y extracted based on starting index
\end_layout

\begin_layout LyX-Code
    y_new = y_new + eps*np.random.randn(len(y_new))
\end_layout

\begin_layout LyX-Code
    A = np.zeros((len(x_new),2)) # The 2D matrix is initialised
\end_layout

\begin_layout LyX-Code
    if (model == 'b'): # model 'b' corresponds to the equation in question
 (b)
\end_layout

\begin_layout LyX-Code
        A[:,0]=np.cos(x_new)
\end_layout

\begin_layout LyX-Code
        A[:,1]=np.sin(x_new)
\end_layout

\begin_layout LyX-Code
    elif (model == 'c'): # model 'c' corresponds to the equation in question
 (c)
\end_layout

\begin_layout LyX-Code
        A[:,0]=np.cos(x_new)/np.sqrt(x_new)
\end_layout

\begin_layout LyX-Code
        A[:,1]=np.sin(x_new)/np.sqrt(x_new)
\end_layout

\begin_layout LyX-Code
    c = lstsq(A,y_new)[0] # Values of A and B found as c[0] and c[1] respectivel
y
\end_layout

\begin_layout LyX-Code
    phi = math.acos(c[0]/(np.sqrt(c[0]*c[0] + c[1]*c[1]))) # phi calculated
\end_layout

\begin_layout LyX-Code
    v = phi - (math.pi/4)
\end_layout

\begin_layout LyX-Code
    v = v / (math.pi/2) # nu finally calculated and returned
\end_layout

\begin_layout LyX-Code
    return v
\end_layout

\begin_layout Standard
In the above function the parameters are:
\end_layout

\begin_layout Description
x: The vector ranging from 0 to 20 with h step-size.
\end_layout

\begin_layout Description
x0: The element in 
\begin_inset ERT
status open

\begin_layout Plain Layout

$x$
\end_layout

\end_inset

 from where the sub-vector is to be taken.
\end_layout

\begin_layout Description
eps: The amount of noise to be added.
 
\begin_inset ERT
status open

\begin_layout Plain Layout

$eps = 0$
\end_layout

\end_inset

 means no noise is added.
\end_layout

\begin_layout Description
model: The equation to be used for finding 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
nu$
\end_layout

\end_inset

.
 The one in question (b) is taken if model = 'b', and the one in 'c' is
 taken if model = 'c'
\end_layout

\begin_layout Section
Calculation and plot of 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
nu$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The different 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
nu$
\end_layout

\end_inset

 values obtained using model 'b', model 'c' with no noise and model 'c'
 with noise (eps = 0.01) are calculated in the sub-vector of 
\begin_inset ERT
status open

\begin_layout Plain Layout

$x$
\end_layout

\end_inset

 starting from 
\begin_inset ERT
status open

\begin_layout Plain Layout

$x_0$
\end_layout

\end_inset

 where 
\begin_inset ERT
status open

\begin_layout Plain Layout

$x_0$
\end_layout

\end_inset

 ranges from 0.5 to 18.
\end_layout

\begin_layout LyX-Code
x0 = np.linspace(0.5,18.0,(18.0-0.5)/h + 1)
\end_layout

\begin_layout LyX-Code
nu_b = []
\end_layout

\begin_layout LyX-Code
nu_c_no_noise = []
\end_layout

\begin_layout LyX-Code
nu_c_with_noise = []
\end_layout

\begin_layout LyX-Code
for i in x0:
\end_layout

\begin_layout LyX-Code
    nu_b.append(calcnu(x,i,0,'b'))
\end_layout

\begin_layout LyX-Code
    nu_c_no_noise.append(calcnu(x,i,0,'c'))
\end_layout

\begin_layout LyX-Code
    nu_c_with_noise.append(calcnu(x,i,0.01,'c'))
\end_layout

\begin_layout LyX-Code
print ("The mean error between the calculated nu values with and without
 noise is:
\end_layout

\begin_layout LyX-Code
",np.mean(np.absolute(np.array(nu_c_no_noise)-np.array(nu_c_with_noise))))
\end_layout

\begin_layout Standard
In this case, the output obtained was:
\end_layout

\begin_layout LyX-Code
The mean error between the calculated nu values with and without noise is:
  0.0062701199953
\end_layout

\begin_layout Standard
The above calculated values are now plotted against 
\begin_inset ERT
status open

\begin_layout Plain Layout

$x_0$
\end_layout

\end_inset

.
\end_layout

\begin_layout LyX-Code
plt.plot(x0, nu_b, 'bo', markeredgecolor='black')
\end_layout

\begin_layout LyX-Code
plt.plot(x0, nu_c_no_noise, 'go', markeredgecolor='black')
\end_layout

\begin_layout LyX-Code
plt.plot(x0, nu_c_with_noise, 'ro', markeredgecolor='black')
\end_layout

\begin_layout LyX-Code
plt.legend(('$
\backslash
epsilon$ = 0, model (b)','$
\backslash
epsilon$ = 0, model (c)','$
\backslash
epsilon$ = 1.0e-02, model (c)'))
\end_layout

\begin_layout LyX-Code
plt.grid()
\end_layout

\begin_layout LyX-Code
plt.title(r'Plot of $
\backslash
nu$ vs $x_0$')
\end_layout

\begin_layout LyX-Code
plt.xlabel('$x_0$')
\end_layout

\begin_layout LyX-Code
plt.ylabel(r'$
\backslash
nu$')
\end_layout

\begin_layout LyX-Code
plt.show()
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename nu_plot1.png
	scale 70

\end_inset


\end_layout

\begin_layout Section
Further calculations
\end_layout

\begin_layout Standard
Now, the number of measurements are increased (i.e step-size in 
\begin_inset ERT
status open

\begin_layout Plain Layout

$x$
\end_layout

\end_inset

 is reduced) and 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
nu$
\end_layout

\end_inset

 is calculated again to observe the changes with respect to that calculated
 with higher step-size.
\end_layout

\begin_layout Subsection
Step-size = 0.25
\end_layout

\begin_layout Standard
With this step-size, the final plot of 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
nu$
\end_layout

\end_inset

 vs 
\begin_inset ERT
status open

\begin_layout Plain Layout

$x_0$
\end_layout

\end_inset

 obtained is:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename nu_plot2.png
	scale 70

\end_inset


\end_layout

\begin_layout Standard
In this case, output obtained was:
\end_layout

\begin_layout LyX-Code
The mean error between the calculated nu values with and without noise is:
  0.00577521050125
\end_layout

\begin_layout Subsection
Step-size = 0.125
\end_layout

\begin_layout Standard
With this step-size, the final plot of 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
nu$
\end_layout

\end_inset

 vs 
\begin_inset ERT
status open

\begin_layout Plain Layout

$x_0$
\end_layout

\end_inset

 obtained is:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename nu_plot3.png
	scale 70

\end_inset


\end_layout

\begin_layout Standard
In this case, output obtained was:
\end_layout

\begin_layout LyX-Code
The mean error between the calculated nu values with and without noise is:
  0.0043178902933
\end_layout

\begin_layout Section
Inferences
\end_layout

\begin_layout Standard
Thus, we find the final fit depends on:
\end_layout

\begin_layout Enumerate

\bar under
Model Accuracy:
\bar default
 We find that the plot corresponding to model 'b' (blue dots) which is a
 less accurate model for the bessel function, varies quite a bit initially
 and even near the end does not completely approach the correct value of
 1 and the oscillatory variation is still present.
 However, for model 'c' (green dots), which is a more accurate estimate
 of the bessel function, such oscillatory variations are not there and the
 estimated 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
nu$
\end_layout

\end_inset

 values steadily increases with 
\begin_inset ERT
status open

\begin_layout Plain Layout

$x_0$
\end_layout

\end_inset

 which means it could approach 1 provided range is increased and hence accuracy
 is more for model 'c' than model 'b'.
 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
vspace{50pt}$
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\bar under
Effect of noise:
\bar default
 We see from the above plots that with noise, the calculated values vary
 quite a bit from the actual values without noise, this becoming more prominent
 as 
\begin_inset ERT
status open

\begin_layout Plain Layout

$x_0$
\end_layout

\end_inset

 increases.
 This is because, similar to increased number of measurements, for lower
 
\begin_inset ERT
status open

\begin_layout Plain Layout

$x_0$
\end_layout

\end_inset

 values, there are more elements in the sub-vector taken and hence, the
 effect of noise is minimal during least square estimation.
 This is because noise added through a standard normal distribution (using
 numpy.random.randn) has a mean of 0 and hence, when more values are taken,
 its net effect would be minimal than when only a few values are taken (which
 is the case at larger 
\begin_inset ERT
status open

\begin_layout Plain Layout

$x_0$
\end_layout

\end_inset

).
\end_layout

\begin_layout Enumerate

\bar under
Number of measurements:
\bar default
 We find that even if the number of measurements is increased, model 'b'
 and model 'c' look similar and hence are not very affected by the number
 of measurements, but it is observed that the mean error between 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
nu$
\end_layout

\end_inset

 values of model 'c' with noise and without noise, reduces as number of
 mesurements increases.
 Hence, as number of mesurements increases, it stabilizes the plot more.
\end_layout

\end_body
\end_document
